硬件数据采集		...树莓派
			javascript (IOT)
数据库				mysql
			mysql
Java后台 		springboot
			javascript(nodeJs)
app					WebUI
			html css	
			小程序wxml wxss
H5全栈（WebUI）
	
1. 复习html/css如何在cordova
	Android（环境，基础知识）
		环境：
			jdk
			sdk
			gradle
		基础知识
			activity 
			项目结构
				manifests	
					配置
				java
				res
					layout

			组件
				Button			按钮
				TextView		文本
				ListView 		列表
				Webview 		网页
					微信公众号，按钮-》网页 
					中国移动
					中国电信
			事件
				事件源
					button findViewById
					button.setOnClickListenner()
				事件处理函数
					内部类
					匿名内部类
					当前类	
			...
	Cordova *
		apache 
			httpd 	
			maven 	构建java项目
			Cordova 构建混合式App的工具
			...
		1. 基础环境安装
			jdk,sdk,gradle
		2. cordova环境
			node
			npm/yarn	下载第三方依赖的工具
			cordova
			> yarn add cordova 
		3. 使用cordova创建混合式app的框架
			> cordova -v
				查看cordova版本
			> cordova create app01
				创建了一个混合式app工程
				-- apk 	
					android
				-- ipa
					ios
			> cd app01
				进入到混合式app工程中
			> cordova platform add android
				将一个android工程加入到platforms文件夹
			> cordova requirements
				检测cordova的依赖环境是否安装好
				jdk
					JAVA_HOME
				sdk
					ANDROID_HOME
				gradle
					GRADLE_HOME
				Path
			> adb devices
				查看连接的模拟器设备
					夜神
						默认无法自动连接，需要使用如下命令连接
						> adb connect 127.0.0.1:62001
						或
						> adb connect 127.0.0.1:52001
					Genymotion

			> cordova run --target 192.168.56.101:5555 android


	html
	css
		1. 布局
			1) 浮动布局
			2) 伸缩盒布局
				容器 		
					display:flex
					flex-direction:row
					flex-wrap
				子元素
					flex-basis
					flex-grow
					flex-shrink
					flex
			3) 定位布局


			java
			servlet
			jdbc

			springmvc
			spring
			mybatis
			spring security
			fastdfs
			poi
			pingyin
			...





	--------------------
	IDEA


	jsp
		script	zuoji.js
		vue.js

	springmvc
	spring
	jdbc /mybatis


springboot
	springmvc	struts2
	spring
	mybatis		hibernate
		R
		O
		接口
		映射文件
	mybatis-generator
		增删改查	

Javascript
	作用
		表单验证	
		交互			(jquery,axios,qs)
		dom操作	(jquery, vue/react/angular)
		构建
		NodeJS
		服务器端开发

	运行在浏览器上

	运行在操作系统		
		jdk		java
		node 	js

						采集/协议							获取
硬件箱子 -> 串口树莓派Java程序 -> Java程序

操作
	灯
	蜂鸣器
	风扇
	门闸
	步进电机
	电磁锁
	继电器
传感器
	人体红外
	温湿度
	二氧化碳
	光照
	紫外线
	PM2.5
	光电开关
	对射开关
	烟雾传感器
	火光传感器
	甲烷传感器


1. 毕业设计流程
	1) 需求分析
		绘制原型，百度了解需求 
			弹幕app
			外卖app
	2) 总体设计
		用例图
		E-R图
	3) 详细设计
		发布任务：
			未付款，已付款，待接单...
		状态图
		流程图
	4) 测试上线
		腾讯
	5) 效果
		代码
		效果图
2. Javascript
	1) 开发环境
		Java、Js、Python
		Linux 服务器端语言

	2) Javascript
		运行在浏览器中
			操作dom 
			ajax请求
		运行在服务器中
			web服务器 http
			数据库操作
			本地文件操作
			硬件操作
	3) 学习步骤
		1. 编写源代码
			编辑器
				idea 				javaweb
				as 					android
				webstorm 		前端
				VIM
				sublime/vscode

		2. 运行，解释型语言
			1) 浏览器
			2) nodeJS / JVM

	4) Javascript 语言标准
		ECMA	制定标准
		实现方：
			解释：浏览器
			编写：程序员

		1. ECMAScript	标准（绝大数浏览器都通用）
		2. DOM 				文档对象模型，js操作dom的api
								很多浏览器中都不太兼容
								封装 jQuery
		3. BOM					浏览器对象模型，js操作浏览器的api
								alert(1);


	5) hello world
		1. 登录到腾讯云中
		2. 在腾讯云中测试node环境
			$ node -v
		3. 在家目录中建立工作空间
			$ cd ~
			$ mkdir 1-Javascript
			$ cd 1-Javascript ; mkdir day02;

	6) 注释
		//
		/**/

	7) 变量
		Java
			数据类型 变量名;
			强类型语言
			int a; 
			a = "hello world"; 	//错误
		Javascript
			弱类型语言
			var a;
			a = "hello world"; 	// 字符串
			a = true;						// 布尔类型
			a = 1;							// 数字类型
			a = null;						// null类型
			a = undefined;			// undefined

	8) 数据类型
		基本数据类型
			String 			字符串
				单引号		'true'
				双引号 		"123"
			Boolean			布尔
				true
				false
			Number			数字
				整数 	12
				小数		12.0
				非数值	NaN 	not a number
				无限大 Infinity
			Null 				空
				null

			Undefined 	未定义类型
				var a ;
				console.log(a);
				var a = undefined;

		引用数据类型
			[] 					数组
			{} 					对象
			/x/ig 			正则
			function(){}函数


			<input type="text" >

			3/"1"
	9) var
		引起变量的声明提升
		收益：NaN
	10) 操作符
		var a = 3;
		一元运算符
			-
			+
				+ true 	=> 1
				+ false => 0
				+ null 	=> 0
				+ undefined =>NaN
			++
			--
		二元运算符
			+ 
			1 + true
		比较运算符
			===
			!==
				先比较数据类型，如果数据类型一致，再比较值
				1 === '1'
			==
			!=
				如果数据类型不同，转换为相同在比较
				1 == '1'
				如果比较的是引用数据类型，那么比较的是引用地址而不是堆区的值。
		逻辑运算符(短路运算符)
			&&
				如果第一个值为真，整个表达式的结果取决于第二个值，所以返回第二个值
				如果第一个值为假，直接返回第一个值
			||
				如果第一个值为真，整个表达式的结果取决于第一个值，所以返回第一个值
				如果第一个值为假，整个表达式的结果取决于第二个值，所以返回第二个值
			&
			|
	11) 数据类型转换
		String
			+""
			new String(1);
		Number
			+值
			new Number(true);
		Boolean
			!!值
			new Boolean();
	12) 流程控制语句
		1. if-else
			if(exp){

			}
			exp 可以为任意数据类型，但是要被自动转换为boolean类型

			if(exp){

			} else {

			}

			if(exp1){

			} else if(exp2) {

			} else {
			
			}
		2. switch-case
			switch(exp){
				case c:
					//...
					break;
				case c:
					//...
					break;
				...
				default:
					break;
			}
			exp与常量在进行对比的时候，使用的===；
			default的位置可以在任意地方，但是如果不在最下方，那么添加break;
			case块结束后必须添加break;
		3. 循环语句
			三要素：初始化条件，结束判断条件，递增

			1) for
				for(初始化;结束判断;递增){
					//循环体
				}
				var total = 0;
				for(var i = 1; i<=100 ; i++){
					total += i;
				}
			2) while
				初始化
				while(结束判断){
					//循环体
					递增
				}
				var total = 0;
				var i = i;
				while(i<=100){
					total += i;
					i++;
				}
			3) do-while
				初始化
				do{
					//循环体
					递增
				} while(结束判断);

				var total = 0;
				var i = 1;
				do {
					total += i;
					i++;
				} while(i<=100);

			4) 增强for
				数组，对象
				var arr = [1,2,3,4,5];
				var arr = {
					0:1,
					1:2,
					2:3,
					3:4,
					4:5
				}
				for(var key in arr){
					var val = arr[key];
				}

			var obj = {
				ws:[4,5,4.2,4.3,4.5],
				jl:[5,2,3,4.5,4]
			}
			报表
			->
			当前的卫生，纪律
			[{
				ws:4,
				jl:5
			},{
				ws:5,
				jl:2
			}...]
	13) 对象
		类 - 实例化产生对象
		1) 创建空对象
			构造函数、自定义构造函数
			var obj = new Object();
			对象字面量
			var obj = {};
		2) 在对象中添加属性
			对象的属性可以动态的添加和删除
			var obj = new Object();
			obj.name = "terry";
			obj.age = 12;
			obj.gender = "male"

			var obj = { 
				name: 'terry', 
				age: 12, 
				gender: 'male' 
			}
			对象是使用大括号作为对象的边界，对象中包含多对属性名和属性值，属性名和属性值之间通过冒号隔开，属性与属性之间通过逗号隔开，最后一个属性一般不加逗号。

		3. 如何访问对象中的属性
			var obj = { 
				name: 'terry', 
				age: 12, 
				gender: 'male' 
			}
			1) 点访问符
				var name = obj.name;
			2) 中括号访问符
				var key = "name";
				var name = obj[key];
				=>
				var name = obj["name"]

		4. 如何删除对象中的属性
			var obj = { 
				name: 'terry', 
				age: 12, 
				gender: 'male' 
			}
			delete obj.age
		5. 如何检测一个属性是否在对象中
			var obj = { 
				name: 'terry', 
				age: 12, 
				gender: 'male',
				weight:"120kg"
			}
			"age" in obj
		6. 任意对象可以调用Object中声明的方法
			toString()
			valueOf()
			hasOwnProperty
			propertyIsEnumerable

			...
		7. 检测属性
			var obj = {
				name:"terry"
			}
			obj.name
			obj.toString
			obj.hasOwnProperty

		8. 对象序列化
			js对象->json字符串
				var obj = {name:"terry",age:12};
				var json = JSON.stringify(obj);

			json字符串-> js对象
				var obj = JSON.parse(json);
	14) 数组
		1. 数组创建
			构造函数创建
			var arr = new Array();
			数组字面量
			var arr = [];
		2. ***arr可以调用Array原型中定义的方法以及Array父类原型中定义的方法。
		3. 特点
			数组中的元素可以为任意数据类型
			**数组的长度是可以动态拓展
			索引是从0开始，但是索引可以超过数组长度
			通过length属性来获取数组的长度
			通过修改length属性可以变大或者减少数组的范围
		4. 数组访问
			中括号访问符
			arr[]
		5. 数组序列化
			JSON.stringify()
				var arr = ["terry","larry"];
				'["terry","larry"]'
			JSON.parse();

		6. 遍历

			var arr =  [
			  {
			    "id": 1,
			    "name": "java",
			    "description": "企业级开发"
			  },
			  {
			    "id": 2,
			    "name": "web",
			    "description": "企业级开发"
			  },
			  {
			    "id": 3,
			    "name": "servlet",
			    "description": "企业级开发"
			  }
			]

			四种遍历方式对该数组进行遍历

	15) 复习
		流程控制语句
			1. 分支
				if-else switch-case
			2. 循环
				for(){}
				while(){}
				do{}while();
				for-in 	属性名
				for-of 	属性值
		对象
			创建方式
			访问方式
			遍历
			json序列化 JSON
			in / 
			Object
				tostring
				valueof
				hasOwnProperty
				proise..

		数组
			创建方式
			访问方式
			遍历
			特点
			api
				Array 构造函数，类似于java中的类，继承Object
				var arr = new Array();

	16) Array中的方法 API
		push 
			向数组的末尾追加元素
			参数：任意数据类型，可以为多个
			返回值：追加元素后数组的长度
		pop
			参数：任意数据类型，可以为多
		shift
		unshift
		reverse
		sort
		splice(起始点,删除的个数,插入的元素[,插入的元素])
		-----不改变原数组------
		concat
		slice
		indexOf
		lastIndexOf
		-------迭代方法--------
		forEach 	循环
		some
		every
			参数都为匿名函数，函数可以接受3个值，分别(item,index,array),匿名函数需要返回一个布尔类型
			在every中，只要有匿名函数返回false，整个结果就为false
			在some中，只要有匿名函数返回true，整个介个就为true
		filter
			如果匿名函数返回true，就会将当前遍历的元素添加到返回值数组中
		map
			映射，将每个匿名内部类的返回值保存的结果数组中




			js对象序列化为json
			{
				"username":"terry",
				"password":"123"
			}

			json格式（application/json）
				'{"username":"terry","password":"123"}'
			form格式 (application/x-www-form-urlencoded)
				username=terry&password=123

			请求报文
				请求行
					GET /user/login?username=terry&password=123
					POST /user/login
				请求头
					Content-Type:application/json
				请求体
					'{"username":"terry","password":"123"}'
					username=terry&password=123


			java

			<form action="" method="" enctype="">
			</form>



	17) 函数
		class xxx {

			public String sayHello(String name){
				return "hello "+name;
			}
		}

		function 函数名(形式参数){}
		function sayHello(name){
		
		}







----------------
构造函数
	Object
	Array		继承Object
	Regexp  继承Object

练习
	myPush() 
	myPop()
	myShift()
	myUnshift();
	
	var arr = [];
	arr.push();
	arr.myPash();



	List 








